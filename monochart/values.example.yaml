replicaCount: 1

serviceAccountName: my-service-account

dockercfg:
  enabled: false
  image:
    pullSecret:
      registry: https://index.docker.io/v1/
      username: example
      password: password

image:
  repository: nginx
  tag: 1.15.3
  pullPolicy: IfNotPresent
  ## Additional docker pull secrets
  pullSecrets:
    - "docker-secret-1"
    - "docker-secret-2"

configMaps:
  default:
    enabled: true
    mountPath: /config-default
    annotations:
      test.annotation: value
    labels:
      test_label: value
    env:
      CONFIG_ENV_NAME: ENV_VALUE
    files:
      config.test.txt: |-
        some text

secrets:
  default:
    enabled: true
    mountPath: /secret-default
    annotations:
      test.secret.annotation: value
    labels:
      test_label: value
    env:
      SECRET_ENV_NAME: ENV_VALUE
    files:
      secret.test.txt: |-
        some text

# SealedSecrets resouces
# Basically we need to add a name to the resource and all the secrets/values that we want.
# the secret name can be changed without problem, but the resource name or the value *NO*
# To create a sealedsecrets you can use the webseal or https://webseal.qa.spoton.sh/
# This requires the sealedsecrets controller to be installed in the cluster first. See https://github.com/SpotOnInc/infrastructure/blob/main/stacks/catalog/eks/cluster-services/sealed-secrets.yaml
# To create a sealedsecret in a different cluster, you can use the kubeseal command line tool with the public key of the cluster. (This is outputed in the logs of the sealedsecrets controller)
#   Following this, you can get the encrypted data using: (cluster-wide is important here, monochart expects a cluster-wide secret for easier sealedsecret management)
#     kubeseal --cert sealedsecret.pub --scope cluster-wide --format yaml <unencrypted-secret.yaml >sealed-secret.yaml
# To make sure a secret gets created before pod creation, use the extraAnnotations provided in the google-secrets example
# NOTE: remember to add the sealedsecret name to the "envFrom.secrets" above.
sealedsecrets:
  enabled: false
  # keys:
  #   - name: google-secrets
  #     extraAnnotations:
  #       "helm.sh/hook-weight": "1"
  #       "helm.sh/hook": "pre-install,pre-upgrade"
  #       "helm.sh/hook-delete-policy": "before-hook-creation"
  #     encryptedData:
  #       SECRET_NAME: AgSDSDSB7oTOgJdtURoUrZ7IDuC50xdfdEMWFwAeashNXnM+s+QcdAXc2Bp99uD2RKYjCvdkP/+OzLmF0SqVfqjPM/+toplTMgNSDQSXGKZMQmrn+fXeq61qXqj2vQ/2tz/98DYXDQXJK3LPpCT/bXJ0Zv6jjxBkONOqkko//PWDxDk/zqVM75MH5qhy8K5Ds9YpQ3aWCtHuRXe1365fQPDpl+hJGZZpC1NZbQFUWpNrXOLQrMRXP8fOZ3+VWo0+elebPE9OpxoWuYXQHX4Dn8B7ArNp6XPJbbxBgsKNv9pG7VHNDRH98kUbttfOMJjIYF0d2IoiAPA9mwSsY3S7Jn0/dp8PL9WgNiILaVDWihs9nhg/iJZvPD8mymNZOggQH8gGkMQQ8p+rgWKeenTwHpC0gfZjQ73OyLuSKhYHn0tvmloiDq0dDreoZCiahZEfZ3MGaOD7xqj8qHmsHxzaDlilBLiM0X1XOmSVxs1Nvmka6vAQEzX6fesyAmPfKqdPEPGpjn39lkWKOHJqby3UnAyjNeTkCvjc4hwQwzNmjivyrbskQGwj3XxpVZruD9XHDRgMca/r3T9NVIpng0yVEmA6HKVOLupUMHvHsY4rE+2n5du/NmBaaw3lM5MybnhxIDQGQz8bFhxr5iIM9vBhF+zRz0ahtAULODh0+ebVHrCbQQnK3EzrkQzxqu6EPPIsuPQepcdeCAmNnoS0/JC2xC1rmEz
  #       ANOTHER_SECRET: AgCSDSDSNXUuenZ8asasFeVEOG+BTH9AdfdfdzbqYcz9VK2GIJdXgnInUv/N7wnIz77yjMd52qXV9SuNJo9RIJwJ+ioo0PuTYBT2ueApCras6hRMtey1fx0shjNJZjYv6uVWsmdd+Y17BTeeB7J6wo0spv/GfnHrtrTn2AfMxV/M2brSxG4yQ6gsrUNEdhdHcII47ae7DDqjEJ2UZgVdRCv8o8AKCu/NqiPEJklLvcXUigKc7KNyGVoJX9uFWGl4buu7hs5IpKfj58tbi6+8yW5YW3PyVbkydIxVAZrGRZS5G60jbCc7UGmo3fuWI7YBZtbsWw8alBexOX/U6+CDMRGClqdick5GGM0cGXHfsSM1XTMQBMxuWTzvEO2RnrgiRZ57PcBh5xrvBRQu49LhZAukPvLj2x6P2jrhU7xrjO+YI1kSZow7tuiIQNZuR+CKNxpZuNUqYvci3jRbj3Pxg0W9AkntTouFxyd4O02yz+OP25Zfqa+F1Uu/JZ9Zkph1/vykixCRc3sEx2oDXjQKFoNFnbCfi7vhNsZNfnLc/jOhXoMOrd63ZR+37cAXyiZ/6GxzWSYygb1CaR9PtALWvkThbgEYRGWdMVKVqyk6Br7K8gyodMNx1/QAX0/Qd9ykAMVoFhC6ykrVvkdPG2n65Ftx0jLrPQ3U75bijffl7e0UvA4olhBxtmgSMymAmKrCs59EqXhAfBcOdaUOwSguyZAJuJ3Wza9eJWFQ==

  #   - name: aws-s3
  #     encryptedData:
  #       USER_ADMIN: sfhiewhiewnfilblfiabflisafblisafalifaifnakfs....
  #       PASS_ADMIN: dfasifnaisnaisdnbafsbasfbsaif...

# Inline ENV variables
env:
  INLINE_ENV_NAME: ENV_VALUE

# ENV variables from existing Kubernetes secrets and ConfigMaps
envFrom:
  secrets:
    - secret-1
    - secret-2
  configMaps:
    - config-1
    - config-2

# ENV variables from fieldRef.fieldPath
# https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#use-pod-fields-as-values-for-environment-variables
envFromFieldRefFieldPath:
  ENV_1: path-1
  ENV_2: path-2

# ENV variables from  secretkeyref
# https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables
envFromSecretKeyRef:
  - name: MY_ENV_VARIABLE
    secret: kubernetes-secret-name
    key: key-name-in-secret

deployment:
  enabled: true
  ## Pods replace strategy
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  # strategy: {}
  revisionHistoryLimit: 10
  annotations:
    nginx.version: 1.15.3
  labels:
    component: nginx
  pod:
    annotations: {}
    ## https://github.com/uswitch/kiam
    ## https://github.com/jtblin/kube2iam
    #  iam.amazonaws.com/role: role-arn
    labels: {}
  affinity:
    # use of simple rule
    affinityRule: "ShouldBeOnDifferentNode"
    # use custom affinity rule. Here app MUST be on different host then postgres instance for it
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - postgresql
          - key: release
            operator: In
            values:
            - "{{ requiredEnv "RELEASE_NAME" }}-postgresql"
        topologyKey: "kubernetes.io/hostname"
